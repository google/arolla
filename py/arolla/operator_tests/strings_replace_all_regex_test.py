# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import itertools

from absl.testing import absltest
from absl.testing import parameterized
from arolla import arolla
from arolla.operator_tests import backend_test_base
from arolla.operator_tests import pointwise_test_utils

M = arolla.M

SCALAR_TEST_DATA = (
    (None, 'a', None, None),
    (None, 'a', 'b', None),
    ('aa', 'a', None, None),
    ('banana', 'ana', 'ono', 'bonona'),
    ('banama', 'a(.)', r'o\1a', 'bonaomaa'),
    ('banama', 'a(.)', r'\0o\1a', 'banonaamomaa'),
)

# This is simply to augment the array test data that will be generated by
# pointwise_test_utils.gen_cases from SCALAR_TEST_DATA.
ARRAY_TEST_DATA = (
    (
        arolla.array(['banana', 'apple']),
        'a',
        arolla.array(['o', 'za']),
        arolla.array(['bonono', 'zapple']),
    ),
    (
        arolla.dense_array([None, 'banana', 'apple']),
        'a(.)',
        arolla.dense_array(['foo', r'o\1p', 'baz']),
        arolla.dense_array([None, 'bonponpa', 'bazple']),
    ),
)


def gen_qtype_signatures():
  regex_qtype = arolla.TEXT
  for text_qtype, replacement_qtype in itertools.product(
      [arolla.TEXT, arolla.OPTIONAL_TEXT], repeat=2
  ):
    yield (text_qtype, regex_qtype, replacement_qtype, arolla.OPTIONAL_TEXT)
  for array_qtype in [arolla.ARRAY_TEXT, arolla.DENSE_ARRAY_TEXT]:
    yield (array_qtype, regex_qtype, array_qtype, array_qtype)
    for text_qtype in [arolla.TEXT, arolla.OPTIONAL_TEXT]:
      yield (array_qtype, regex_qtype, text_qtype, array_qtype)
      yield (text_qtype, regex_qtype, array_qtype, array_qtype)


QTYPE_SIGNATURES = tuple(
    gen_qtype_signatures(),
)


class StringsReplaceAllRegexTest(
    parameterized.TestCase, backend_test_base.SelfEvalMixin
):

  def test_qtype_signatures(self):
    self.require_self_eval_is_called = False
    arolla.testing.assert_qtype_signatures(
        M.strings.replace_all_regex, QTYPE_SIGNATURES
    )

  @parameterized.parameters(
      pointwise_test_utils.gen_cases(SCALAR_TEST_DATA, *QTYPE_SIGNATURES)
  )
  def test_eval(self, arg1, arg2, arg3, expected_value):
    actual_value = self.eval(M.strings.replace_all_regex(arg1, arg2, arg3))
    arolla.testing.assert_qvalue_allequal(actual_value, expected_value)

  @parameterized.parameters(*ARRAY_TEST_DATA)
  def test_eval_with_more_complex_arrays(
      self, arg1, arg2, arg3, expected_value
  ):
    actual_value = self.eval(M.strings.replace_all_regex(arg1, arg2, arg3))
    arolla.testing.assert_qvalue_allequal(actual_value, expected_value)


if __name__ == '__main__':
  absltest.main()
