# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any, Iterable, SupportsBytes, SupportsFloat, SupportsIndex
from arolla.abc import abc as arolla_abc

class MissingOptionalError(ValueError):
  pass

# go/keep-sorted start block=yes
ARRAY_EDGE: arolla_abc.QType = ...
ARRAY_SHAPE: arolla_abc.QType = ...
ARRAY_TO_SCALAR_EDGE: arolla_abc.QType = ...
ARRAY_UNIT: arolla_abc.QType = ...
DENSE_ARRAY_EDGE: arolla_abc.QType = ...
DENSE_ARRAY_SHAPE: arolla_abc.QType = ...
DENSE_ARRAY_TO_SCALAR_EDGE: arolla_abc.QType = ...
OPTIONAL_SCALAR_SHAPE: arolla_abc.QType = ...
SCALAR_SHAPE: arolla_abc.QType = ...
SCALAR_TO_SCALAR_EDGE: arolla_abc.QType = ...
# go/keep-sorted end

# go/keep-sorted start block=yes
_BooleanLike = Any
_BytesLike = SupportsBytes
_FloatLike = SupportsFloat | SupportsIndex
_IndexLike = SupportsIndex
_TextLike = Any
_UnitLike = Any
# go/keep-sorted end

_Buffer = Any  # TODO: Use collections.abc.Buffer from Python 3.12.

# go/keep-sorted start block=yes
def py_boolean(x: _BooleanLike | None, /) -> bool | None: ...
def py_bytes(x: _BytesLike | None, /) -> bytes | None: ...
def py_float(x: _FloatLike | None, /) -> float | None: ...
def py_index(x: _IndexLike | None, /) -> int | None: ...
def py_text(x: _TextLike | None, /) -> str | None: ...
def py_unit(x: _UnitLike | None, /) -> bool | None: ...
# go/keep-sorted end

# go/keep-sorted start block=yes
def boolean(x: _BooleanLike, /) -> arolla_abc.AnyQValue: ...
def bytes(x: _BytesLike, /) -> arolla_abc.AnyQValue: ...
def float32(x: _FloatLike, /) -> arolla_abc.AnyQValue: ...
def float64(x: _FloatLike, /) -> arolla_abc.AnyQValue: ...
def int32(x: _IndexLike, /) -> arolla_abc.AnyQValue: ...
def int64(x: _IndexLike, /) -> arolla_abc.AnyQValue: ...
def text(x: _TextLike, /) -> arolla_abc.AnyQValue: ...
def uint64(x: _IndexLike, /) -> arolla_abc.AnyQValue: ...
def unit() -> arolla_abc.AnyQValue: ...
def weak_float(x: _FloatLike, /) -> arolla_abc.AnyQValue: ...
# go/keep-sorted end

# go/keep-sorted start block=yes
def optional_boolean(x: _BooleanLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_bytes(x: _BytesLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_float32(x: _FloatLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_float64(x: _FloatLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_int32(x: _IndexLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_int64(x: _IndexLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_text(x: _TextLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_uint64(x: _IndexLike | None, /) -> arolla_abc.AnyQValue: ...
def optional_unit(x: _UnitLike | None) -> arolla_abc.AnyQValue: ...
def optional_weak_float(x: _FloatLike | None, /) -> arolla_abc.AnyQValue: ...
# go/keep-sorted end

# go/keep-sorted start block=yes
def dense_array_boolean_from_values(
    values: Iterable[_BooleanLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_bytes_from_values(
    values: Iterable[_BytesLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_float32_from_values(
    values: Iterable[_FloatLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_float64_from_values(
    values: Iterable[_FloatLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_int32_from_values(
    values: Iterable[_IndexLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_int64_from_values(
    values: Iterable[_IndexLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_text_from_values(
    values: Iterable[_TextLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_uint64_from_values(
    values: Iterable[_IndexLike | None], /
) -> arolla_abc.AnyQValue: ...
def dense_array_unit_from_values(
    values: Iterable[_UnitLike], /
) -> arolla_abc.AnyQValue: ...
def dense_array_weak_float_from_values(
    values: Iterable[_FloatLike | None], /
) -> arolla_abc.AnyQValue: ...
# go/keep-sorted end

# go/keep-sorted start block=yes
def dense_array_boolean_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_float32_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_float64_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_int32_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_int64_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_uint64_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
def dense_array_weak_float_from_values_buffer(
    buffer: _Buffer, /
) -> arolla_abc.AnyQValue: ...
# go/keep-sorted end

def get_array_item(
    array: arolla_abc.QValue, i: _IndexLike, /
) -> arolla_abc.AnyQValue: ...
def get_array_py_value(array: arolla_abc.QValue, /) -> list[Any]: ...

# go/keep-sorted start block=yes newline_separated=yes
def get_namedtuple_field_index(
    qtype: arolla_abc.QType, field_name: str, /
) -> int | None: ...

def get_namedtuple_field_names(qtype: arolla_abc.QType, /) -> list[str]: ...

def get_nth(qvalue: arolla_abc.QValue, n: int, /) -> arolla_abc.AnyQValue: ...

def internal_make_namedtuple_qtype(
    field_names: Iterable[str], tuple_qtype: arolla_abc.QType, /
) -> arolla_abc.QType: ...

def internal_make_sequence_qvalue(
    values: tuple[arolla_abc.QValue, ...],
    value_qtype: arolla_abc.QType | None = None,
    /,
) -> arolla_abc.AnyQValue: ...

def internal_make_tuple_qtype(
    field_qtypes: Iterable[arolla_abc.QType], /
) -> arolla_abc.QType: ...

def is_dict_qtype(qtype: arolla_abc.QType, /) -> bool: ...

def is_key_to_row_dict_qtype(qtype: arolla_abc.QType, /) -> bool: ...

def is_namedtuple_qtype(qtype: arolla_abc.QType, /) -> bool: ...

def is_sequence_qtype(qtype: arolla_abc.QType, /) -> bool: ...

def is_tuple_qtype(qtype: arolla_abc.QType, /) -> bool: ...

def make_dict_qtype(
    key_qtype: arolla_abc.QType, value_qtype: arolla_abc.QType, /
) -> arolla_abc.QType: ...

def make_key_to_row_dict_qtype(
    key_qtype: arolla_abc.QType, /
) -> arolla_abc.QType: ...

def make_qvalue_from_fields(
    compound_qtype: arolla_abc.QType,
    field_qvalues: Iterable[arolla_abc.QValue],
    /,
) -> arolla_abc.AnyQValue: ...

def make_sequence_qtype(
    value_qtype: arolla_abc.QType, /
) -> arolla_abc.QType: ...

def make_sequence_qvalue(
    values: Iterable[arolla_abc.QValue],
    /,
    value_qtype: arolla_abc.QType | None = None,
) -> arolla_abc.AnyQValue: ...
# go/keep-sorted end
