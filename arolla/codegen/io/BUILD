# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# bzl based functions for code generation.

load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@pip_deps//:requirements.bzl", "requirement")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_test.bzl", "cc_test")
load("@rules_python//python:defs.bzl", "py_library", "py_test")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

# required for make_build_script in io.bzl
exports_files([
    "input_loader_main.py",
    "input_loader_set_main.py",
    "wildcard_input_loaders_main.py",
    "slot_listener_main.py",
])

# library used as dependency for binaries generated by utils.bzl:make_build_script
py_library(
    name = "input_loader_main",
    srcs = ["input_loader_main.py"],
    deps = [
        ":io",
        "//arolla/codegen:utils",
        "//py:python_path",
        "@com_google_absl_py//absl:app",
        "@com_google_absl_py//absl/flags",
    ],
)

# library used as dependency for binaries generated by utils.bzl:make_build_script
py_library(
    name = "input_loader_set_main",
    srcs = ["input_loader_set_main.py"],
    deps = [
        ":io",
        "//arolla/codegen:utils",
        "//py:python_path",
        "@com_google_absl_py//absl:app",
        "@com_google_absl_py//absl/flags",
    ],
)

# library used as dependency for binaries generated by utils.bzl:make_build_script
py_library(
    name = "wildcard_input_loaders_main",
    srcs = ["wildcard_input_loaders_main.py"],
    deps = [
        ":io",
        "//py:python_path",
        "@com_google_absl_py//absl:app",
        "@com_google_absl_py//absl/flags",
    ],
)

# library used as dependency for binaries generated by utils.bzl:make_build_script
py_library(
    name = "slot_listener_main",
    srcs = ["slot_listener_main.py"],
    deps = [
        ":io",
        "//arolla/codegen:utils",
        "//py:python_path",
        "@com_google_absl_py//absl:app",
        "@com_google_absl_py//absl/flags",
    ],
)

py_library(
    name = "io",
    srcs = [
        "accessor_generator.py",
        "accessors.py",
        "array_generator.py",
        "cpp.py",
        "flag_utils.py",
        "input_loader_lib.py",
        "jinja_util.py",
        "multi_protopath.py",
        "protopath.py",
        "table.py",
    ],
    data = [
        "input_loader.cc.jinja2",
        "input_loader.h.jinja2",
        "input_loader_accessors.cc.jinja2",
        "input_loader_multi_value_proto.cc.jinja2",
        "input_loader_operators.cc.jinja2",
        "input_loader_operators.h.jinja2",
        "input_loader_operators_util.jinja2",
        "input_loader_sharding.cc.jinja2",
        "input_loader_single_value_proto.cc.jinja2",
        "input_loader_utils.jinja2",
        "io_utils.jinja2",
        "slot_listener.cc.jinja2",
        "slot_listener.h.jinja2",
        "slot_listener_accessors.cc.jinja2",
        "slot_listener_single_value_proto.cc.jinja2",
        "slot_listener_utils.jinja2",
        "wildcard_input_loaders.cc.jinja2",
        "wildcard_input_loaders.h.jinja2",
    ],
    deps = [
        "//arolla/codegen:utils",
        "//arolla/proto:io_py_proto",
        "//py:python_path",
        requirement("jinja2"),
        "@com_google_protobuf//:protobuf_python",
    ],
)

py_test(
    name = "accessors_test",
    srcs = ["accessors_test.py"],
    deps = [
        ":io",
        "//py:python_path",
        "@com_google_absl_py//absl/testing:absltest",
    ],
)

py_test(
    name = "cpp_test",
    srcs = ["cpp_test.py"],
    deps = [
        ":io",
        "//py:python_path",
        "@com_google_absl_py//absl/testing:absltest",
    ],
)

py_test(
    name = "protopath_test",
    srcs = ["protopath_test.py"],
    deps = [
        ":io",
        "//arolla/proto/testing:test_extension_py_proto",
        "//arolla/proto/testing:test_proto3_py_proto",
        "//arolla/proto/testing:test_py_proto",
        "//py:python_path",
        "@com_google_absl_py//absl/testing:absltest",
        "@com_google_absl_py//absl/testing:parameterized",
    ],
)

py_test(
    name = "array_generator_test",
    srcs = ["array_generator_test.py"],
    deps = [
        ":io",
        "//py:python_path",
        "@com_google_absl_py//absl/testing:absltest",
    ],
)

bzl_library(
    name = "io_bzl",
    srcs = ["io.bzl"],
    deps = [
        "//arolla/codegen:utils_bzl",
    ],
)

cc_library(
    name = "multi_loader",
    srcs = ["multi_loader.cc"],
    hdrs = ["multi_loader.h"],
    local_defines = ["AROLLA_IMPLEMENTATION"],
    deps = [
        "//arolla/dense_array",
        "//arolla/io/proto_types",
        "//arolla/memory",
        "//arolla/qtype",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/types:span",
        "@com_google_protobuf//:protobuf_lite",
    ],
)

py_test(
    name = "multi_protopath_test",
    srcs = ["multi_protopath_test.py"],
    deps = [
        ":io",
        "//py:python_path",
        "@com_google_absl_py//absl/testing:absltest",
    ],
)

cc_test(
    name = "multi_loader_test",
    srcs = ["multi_loader_test.cc"],
    deps = [
        ":multi_loader",
        "//arolla/dense_array",
        "//arolla/dense_array/qtype",
        "//arolla/memory",
        "//arolla/proto/testing:test_cc_proto",
        "//arolla/qtype",
        "@com_google_googletest//:gtest_main",
    ],
)
