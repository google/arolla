// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Protobuf messages for Arolla serialization format
//
// This file defines low-level primitives for the Arolla serialization format.
// Clients should avoid using these primitives directly and instead use
// the Arolla serialization library for encoding and decoding.
//
// The serialization format centers around the idea of a sequence of
// interconnected decoding steps stored within a container. These decoding steps
// represent an assembly instruction for constructing values and expressions;
// and from the client's perspective, the container simply stores these values
// and expressions.
//
// The base serialization format does not specify how to store concrete value
// types (such as int32, float32). Support for all value types is provided
// through "codecs".
//
// NOTE: The references between the decoding steps are based on the indices
// assigned by the "container". The indices must be assigned without gaps and
// may never exceed the total number of decoding steps stored within
// the container.
//
// Currently, indices within the categories ValueOrExpression and Codec must be
// unique within their respective categories, but not necessarily unique across
// all categories. For example, there could be two decoding steps with the index
// 0, one in the Codec category and one in the ValueOrExpression category.
// (We are considering making this property stricter in
// `ContainerProto.version=2`.)
//

syntax = "proto2";

package arolla.serialization_base;

option cc_enable_arenas = true;

// A protobuf compatible container format.
//
// NOTE: This message is subject to protobuf's 2GB size limit.
message ContainerProto {
  // Version of the container format.
  //
  // NOTE: Alterations in codecs do not change the container format.
  optional int64 version = 1;

  // List of codecs required for decoding.
  //
  // NOTE: This field will be deprecated in `ContainerProto.version=2`.
  repeated CodecProto codecs = 2 [deprecated = true];

  // Sequence of decoding steps that assemble entities -- expressions and
  // values.
  repeated DecodingStepProto decoding_steps = 3;

  // References to the decoding steps corresponding to the expressions and
  // values stored in the container.
  //
  // If the container stores just one entity -- a value or an expression --
  // there will be an index of the last decoding step.
  //
  // NOTE: These fields will be deprecated in `ContainerProto.version=2`.
  repeated uint64 output_value_indices = 4 [deprecated = true];
  repeated uint64 output_expr_indices = 5 [deprecated = true];
}

// Represents a literal node.
message LiteralNodeProto {
  // Reference to a past decoding step with a value.
  optional uint64 literal_value_index = 1;
}

// Represents a leaf node.
message LeafNodeProto {
  optional string leaf_key = 1;
}

// Represents a placeholder node.
message PlaceholderNodeProto {
  optional string placeholder_key = 1;
}

// Represents an operator node.
message OperatorNodeProto {
  // Reference to a past decoding step with EXPR_OPERATOR.
  optional uint64 operator_value_index = 1;
  // References to past decoding steps with dependant expressions.
  repeated uint64 input_expr_indices = 2;
}

// Represents a value.
message ValueProto {
  // References to past decoding steps with values.
  repeated uint64 input_value_indices = 1;
  // References to past decoding steps with expressions.
  repeated uint64 input_expr_indices = 2;

  // (optional) Reference to a past decoding step that declares the codec needed
  // to decode the value.
  //
  // NOTE: The presence of ValueProto.codec_index improves decoding speed.
  // If codec_index is not set, the decoder iterates through all previously
  // declared codecs.
  optional uint64 codec_index = 3;

  // A range for the "unverified" allocation scheme.
  //
  // The recommended extension-id generator:
  //   echo $((EPOCHSECONDS / 10 * 3 - 181776905))
  extensions 326031909 to 524999999;
}

// Represents a serialization codec.
message CodecProto {
  optional string name = 1;
}

// Assembling instructions for the decoder.
//
// The decoding steps of different categories can be intermixed; however,
// a decoding step can reference only the decoding steps preceding it.
message DecodingStepProto {
  oneof type {
    LiteralNodeProto literal_node = 1;          // Category: ValueOrExpression
    LeafNodeProto leaf_node = 2;                //           ValueOrExpression
    PlaceholderNodeProto placeholder_node = 3;  //           ValueOrExpression
    OperatorNodeProto operator_node = 4;        //           ValueOrExpression
    ValueProto value = 5;                       //           ValueOrExpression
    CodecProto codec = 6;                       //           Codec
    uint64 output_value_index = 7;              //           Output
    uint64 output_expr_index = 8;               //           Output
  }
}
