// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Protobuf messages for arolla dense_array serialization.

syntax = "proto2";

package arolla.serialization_codecs;

import "arolla/serialization_base/base.proto";

option cc_enable_arenas = true;

// Serialization format for arolla::DecisionForest.
// See fields description in
//     decision_forest/decision_forest.h
//     decision_forest/split_conditions/*
// All fields have one-to-one correspondence.
//
message DecisionForestV1Proto {
  extend arolla.serialization_base.ValueProto {
    optional DecisionForestV1Proto extension = 412259944;
  }

  message IntervalSplitCondition {
    optional int32 input_id = 1;
    optional float left = 2;
    optional float right = 3;
  }

  message SetOfValuesSplitConditionInt64 {
    optional int32 input_id = 1;
    repeated int64 values = 2 [packed = true];
    optional bool result_if_missed = 3;
  }

  message NodeId {
    oneof node_id {
      int32 split_node_id = 1;
      int32 adjustment_id = 2;
    }
  }

  message SplitNode {
    optional NodeId child_if_false = 1;
    optional NodeId child_if_true = 2;
    oneof condition {
      IntervalSplitCondition interval_condition = 3;
      SetOfValuesSplitConditionInt64 set_of_values_int64_condition = 4;
    }
  }

  message DecisionTree {
    repeated SplitNode split_nodes = 1;
    repeated float adjustments = 2 [packed = true];
    optional float weight = 3;
    optional int32 step = 4;
    optional int32 submodel_id = 5;
  }

  message DecisionForest {
    repeated DecisionTree trees = 1;
  }

  // input_value_indices[0]
  //   -- DecisionForest
  // input_expr_indices[0]
  //   -- Postprocessing expression.
  // input_expr_indices[1:]
  //   -- Preprocessing expressions.
  //
  message ForestModel {
    message SubmodelGroup {
      optional string name = 1;
      repeated int32 submodel_ids = 2 [packed = true];
    }
    message Arg {
      optional string name = 1;
      optional bool has_preprocessing = 2 [default = false];
    }

    repeated Arg args = 1;
    repeated SubmodelGroup submodel_groups = 2;
  }

  oneof value {
    DecisionForest forest = 1;
    ForestModel forest_model = 2;
    bool forest_qtype = 101;
  }
}
